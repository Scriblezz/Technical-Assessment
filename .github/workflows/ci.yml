name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-php-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend-lumen
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: tech_assessment
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h 127.0.0.1 -uroot -proot || exit 1" 
          --health-interval 5s --health-timeout 5s --health-retries 20
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, pdo_mysql, zip, redis
          coverage: none
      - name: Install Composer dependencies
        run: composer install --no-interaction
      - name: Prepare .env
        run: |
          cp .env.example .env || true
          echo "APP_ENV=testing" >> .env
          echo "APP_DEBUG=false" >> .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=tech_assessment" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=root" >> .env
          echo "CACHE_DRIVER=file" >> .env
          php -r "file_exists('bootstrap/cache') || mkdir('bootstrap/cache', 0777, true);"
      - name: Run migrations
        run: php artisan migrate --force
      - name: Seed database
        run: php artisan db:seed --force
      - name: Run PHPUnit
        run: ./vendor/bin/phpunit --colors=always

  node-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: node-cache
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: node-cache/package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test -- --runInBand --colors

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-php-tests, node-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build images (no push)
        run: |
          docker build -t technical-assessment-api:ci ./backend-lumen
          docker build -t technical-assessment-cache:ci ./node-cache
          docker build -t technical-assessment-frontend:ci ./frontend
